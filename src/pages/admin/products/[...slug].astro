---
import ProductImage from "@/components/products/ProductImage.astro";
import ProductSlideShow from "@/components/products/ProductSlideShow.astro";
import Layout from "@/layouts/Layout.astro";
import { actions } from "astro:actions";

const { slug } = Astro.params;

const { data, error } = await Astro.callAction(
  actions.getProductBySlug,
  slug ?? "",
);

if (error) {
  return Astro.redirect("/404");
}

const { product, images } = data;

export const prerender = false;
---

<Layout title="Product maintenance">
  <h1>{product.title}</h1>
  <a href="javascript:history.back()" class="text-blue-500">‚Üê Back</a>

  <form class="grid grid-cols-1 sm:grid-cols-2 gap-4">
    <!-- General specs -->
    <div class="mt-2">
      <h2 class="text-lg font-semibold">Generasl specs</h2>

      <!-- Title -->
      <div class="mb-4">
        <label for="title" class="block">Title</label>
        <input
          type="text"
          id="title"
          name="title"
          value={product.title}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>

      <!-- Slug -->
      <div class="mb-4">
        <label for="slug" class="block">Slug</label>
        <input
          type="text"
          id="slug"
          name="slug"
          value={product.slug}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>

      <!-- Description -->
      <div class="mb-4">
        <label for="description" class="block">Descripti√≥n</label>
        <textarea
          id="description"
          name="description"
          class="w-full p-2 border border-gray-300 rounded"
          rows="8">{product.description}</textarea
        >
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 gap-5">
        <!-- Price -->
        <div class="mb-4">
          <label for="price" class="block">Price</label>
          <input
            type="number"
            id="price"
            name="price"
            value={product.price}
            class="w-full p-2 border border-gray-300 rounded"
          />
        </div>

        <!-- Inventory -->
        <div class="mb-4">
          <label for="stock" class="block">inventory</label>
          <input
            type="number"
            id="stock"
            name="stock"
            value={product.stock}
            class="w-full p-2 border border-gray-300 rounded"
          />
        </div>
      </div>

      <!-- Labels -->
      <div class="mb-4">
        <label for="tags" class="block"
          >Etiquetas <small class="text-gray-500">(Separated by coma)</small
          ></label
        >
        <input
          type="text"
          id="tags"
          name="tags"
          value={product.tags}
          class="w-full p-2 border border-gray-300 rounded"
        />
      </div>

      <div class="grid grid-cols-2 gap-4">
        <!-- Gender -->
        <div class="mb-4">
          <label for="gender" class="block">Sex</label>
          <select
            class="w-full p-2 border border-gray-300 rounded"
            name="gender"
          >
            <option value="">[ Select ]</option>
            {
              ["men", "women", "unisex", "kid"].map((gender) => (
                <option
                  value={gender}
                  class="capitalize"
                  selected={gender === product.gender}
                >
                  {gender.toUpperCase()}
                </option>
              ))
            }
          </select>
        </div>

        <!-- Type -->
        <div class="mb-4">
          <label for="tags" class="block">Tipo</label>
          <select class="w-full p-2 border border-gray-300 rounded" name="type">
            <option value="">[ Select ]</option>
            {
              ["shirts", "shirt", "pants", "hats", "hoodies"].map((type) => (
                <option
                  value={type}
                  class="capitalize"
                  selected={type === product.type}
                >
                  {type.toUpperCase()}
                </option>
              ))
            }
          </select>
        </div>
      </div>

      <!-- Sizes -->

      <!--  This combination of inline event handling and conditional class assignment allows for dynamic and interactive UI elements. When a user clicks on the element, it toggles the 'active' class, and the initial class state is determined by whether the size is part of the product.sizes array. -->
      <div class="mb-4">
        <label for="sizes" class="block">Sizes</label>
        <div class="flex">
          {
            ["XS", "S", "M", "L", "XL", "XXL"].map((size) => (
              <button
                type="button"
                class="btn-size"
                onclick="this.classList.toggle('active')"
                class:list={
                  product.sizes.split(",").includes(size) ? "active" : ""
                }
              >
                {size}
              </button>
            ))
          }
        </div>
      </div>
    </div>

    <!-- Images -->
    <div>
      <!-- File upload -->
      <div class="mt-4">
        <!-- Save  -->
        <div class="flex justify-end">
          <button class="bg-blue-500 mb-5 p-2 rounded text-white"
            >Save product</button
          >
        </div>

        <!-- File input -->
        <div class="flex items-center justify-center w-full">
          <label
            for="file-upload"
            class="flex flex-col items-center justify-center w-full h-52 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:bg-gray-100"
            id="drop-zone"
          >
            <div class="flex flex-col items-center justify-center pt-5 pb-6">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="48"
                height="48"
                viewBox="0 0 48 48"
                ><rect width="48" height="48" fill="none"></rect><path
                  fill="none"
                  stroke="#2897fd"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M4.5 11.5a3 3 0 0 1 3-3h8.718a4 4 0 0 1 2.325.745l4.914 3.51a4 4 0 0 0 2.325.745H40.5a3 3 0 0 1 3 3v20a3 3 0 0 1-3 3h-33a3 3 0 0 1-3-3z"
                ></path><path
                  fill="none"
                  stroke="#2897fd"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M24 33.5v-14m6.167 6.167L24 19.5l-6.167 6.167"></path></svg
              >
              <p class="mb-2 text-sm text-gray-500" id="lbl-selected-files">
                <span class="font-semibold">Click here </span> or drag the files
              </p>
              <p class="text-xs text-gray-500">
                SVG, PNG, JPG or GIF (max. 800x400px)
              </p>
            </div>

            <!-- class="hidden" -->
            <!-- accept only images -->
            <input
              id="file-upload"
              name="imageFiles"
              type="file"
              accept="image/*"
              multiple
            />
          </label>
        </div>

        <!-- Slideshow -->
        <ProductSlideShow images={images} />

        <table class="w-full border mb-5">
          <thead>
            <tr>
              <th>Image</th>
              <th>Delete</th>
            </tr>
          </thead>
          <tbody>
            {
              images.map((image) => (
                <tr class="border">
                  <td class="flex justify-center">
                    <ProductImage
                      src={image}
                      alt={product.title}
                      className="w-16 h-16 rounded"
                    />
                  </td>
                  <td class="text-center">
                    <button class="btn-delete-image">X</button>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </form>

  <style>
    .btn-size,
    .btn-delete-image {
      @apply rounded border cursor-pointer border-gray-300 w-10 h-10 mr-4 hover:bg-blue-300 hover:text-white transition-all;
    }

    .active {
      @apply bg-blue-500 text-white;
    }
  </style>
</Layout>

<script>
  // Remenber: when we're working with view transitions we must use the Astro page load event to ensure that the script runs on the first page load and after every navigation

  document.addEventListener("astro:page-load", () => {
    const form = document.querySelector("form") as HTMLFormElement;

    // Here we're evaluate if doesn't have a form do nothing
    if (!form) {
      return;
    }

    form.addEventListener("submit", (e) => {
      e.preventDefault();

      // To take the form values
      const formData = new FormData(form);

      const formValues = Object.fromEntries(formData.entries());
      console.log("üöÄ ~ form.addEventListener ~ formValues:", formValues);
    });
  });
</script>
